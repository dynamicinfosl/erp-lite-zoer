#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o do Supabase
 * Verifica e corrige problemas de configura√ß√£o e sess√µes cruzadas
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Cores para output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Carregar vari√°veis de ambiente
function loadEnvVars() {
  const envPath = path.join(process.cwd(), '.env.local');
  
  if (!fs.existsSync(envPath)) {
    log('‚ùå Arquivo .env.local n√£o encontrado!', 'red');
    return null;
  }

  const envContent = fs.readFileSync(envPath, 'utf8');
  const envVars = {};
  
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length > 0) {
      envVars[key.trim()] = valueParts.join('=').trim();
    }
  });

  return envVars;
}

// Verificar configura√ß√£o do Supabase
async function verifySupabaseConfig() {
  log('\nüîç VERIFICA√á√ÉO DO SUPABASE', 'cyan');
  log('='.repeat(50), 'cyan');

  const envVars = loadEnvVars();
  if (!envVars) {
    return false;
  }

  // Verificar vari√°veis de ambiente
  log('\nüìã Verificando vari√°veis de ambiente:', 'blue');
  
  const requiredVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY'
  ];

  let allVarsPresent = true;
  
  requiredVars.forEach(varName => {
    if (envVars[varName]) {
      log(`‚úÖ ${varName}: Configurada`, 'green');
    } else {
      log(`‚ùå ${varName}: N√£o configurada`, 'red');
      allVarsPresent = false;
    }
  });

  if (!allVarsPresent) {
    log('\n‚ö†Ô∏è  Algumas vari√°veis de ambiente est√£o faltando!', 'yellow');
    return false;
  }

  // Testar conex√£o com Supabase
  log('\nüîó Testando conex√£o com Supabase:', 'blue');
  
  try {
    const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY;
    
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // Testar conex√£o b√°sica
    const { data, error } = await supabase.from('tenants').select('count').limit(1);
    
    if (error) {
      log(`‚ùå Erro na conex√£o: ${error.message}`, 'red');
      return false;
    }
    
    log('‚úÖ Conex√£o com Supabase estabelecida', 'green');
    
    // Verificar tabelas essenciais
    log('\nüìä Verificando tabelas essenciais:', 'blue');
    
    const tables = ['tenants', 'user_memberships', 'users'];
    for (const table of tables) {
      try {
        const { error: tableError } = await supabase.from(table).select('*').limit(1);
        if (tableError) {
          log(`‚ùå Tabela ${table}: ${tableError.message}`, 'red');
        } else {
          log(`‚úÖ Tabela ${table}: OK`, 'green');
        }
      } catch (err) {
        log(`‚ùå Tabela ${table}: Erro - ${err.message}`, 'red');
      }
    }
    
    return true;
    
  } catch (error) {
    log(`‚ùå Erro na conex√£o: ${error.message}`, 'red');
    return false;
  }
}

// Verificar sess√µes ativas
async function checkActiveSessions() {
  log('\nüîê VERIFICA√á√ÉO DE SESS√ïES', 'cyan');
  log('='.repeat(50), 'cyan');

  const envVars = loadEnvVars();
  if (!envVars) return false;

  try {
    const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
    const serviceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;
    
    const supabaseAdmin = createClient(supabaseUrl, serviceKey);
    
    // Listar usu√°rios recentes
    log('\nüë• Usu√°rios criados recentemente:', 'blue');
    
    const { data: users, error: usersError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (usersError) {
      log(`‚ùå Erro ao listar usu√°rios: ${usersError.message}`, 'red');
      return false;
    }
    
    if (users && users.users) {
      users.users.slice(0, 5).forEach((user, index) => {
        const createdAt = new Date(user.created_at).toLocaleString('pt-BR');
        log(`${index + 1}. ${user.email} (${user.id}) - ${createdAt}`, 'yellow');
      });
    }
    
    // Verificar tenants
    log('\nüè¢ Tenants ativos:', 'blue');
    
    const { data: tenants, error: tenantsError } = await supabaseAdmin
      .from('tenants')
      .select('id, name, status, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (tenantsError) {
      log(`‚ùå Erro ao listar tenants: ${tenantsError.message}`, 'red');
    } else if (tenants) {
      tenants.forEach((tenant, index) => {
        const createdAt = new Date(tenant.created_at).toLocaleString('pt-BR');
        log(`${index + 1}. ${tenant.name} (${tenant.id}) - Status: ${tenant.status} - ${createdAt}`, 'yellow');
      });
    }
    
    return true;
    
  } catch (error) {
    log(`‚ùå Erro ao verificar sess√µes: ${error.message}`, 'red');
    return false;
  }
}

// Limpar sess√µes problem√°ticas
async function clearProblematicSessions() {
  log('\nüßπ LIMPEZA DE SESS√ïES', 'cyan');
  log('='.repeat(50), 'cyan');

  const envVars = loadEnvVars();
  if (!envVars) return false;

  try {
    const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
    const serviceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;
    
    const supabaseAdmin = createClient(supabaseUrl, serviceKey);
    
    // Listar todas as sess√µes ativas
    log('\nüîç Verificando sess√µes ativas...', 'blue');
    
    const { data: sessions, error: sessionsError } = await supabaseAdmin.auth.admin.listUsers();
    
    if (sessionsError) {
      log(`‚ùå Erro ao listar sess√µes: ${sessionsError.message}`, 'red');
      return false;
    }
    
    if (sessions && sessions.users) {
      log(`üìä Total de usu√°rios: ${sessions.users.length}`, 'yellow');
      
      // Verificar usu√°rios duplicados por email
      const emailCounts = {};
      sessions.users.forEach(user => {
        if (emailCounts[user.email]) {
          emailCounts[user.email]++;
        } else {
          emailCounts[user.email] = 1;
        }
      });
      
      const duplicates = Object.entries(emailCounts).filter(([email, count]) => count > 1);
      
      if (duplicates.length > 0) {
        log('\n‚ö†Ô∏è  Emails duplicados encontrados:', 'yellow');
        duplicates.forEach(([email, count]) => {
          log(`   ${email}: ${count} contas`, 'red');
        });
      } else {
        log('‚úÖ Nenhum email duplicado encontrado', 'green');
      }
    }
    
    return true;
    
  } catch (error) {
    log(`‚ùå Erro na limpeza: ${error.message}`, 'red');
    return false;
  }
}

// Gerar relat√≥rio de configura√ß√£o
function generateConfigReport() {
  log('\nüìã RELAT√ìRIO DE CONFIGURA√á√ÉO', 'cyan');
  log('='.repeat(50), 'cyan');

  const envVars = loadEnvVars();
  if (!envVars) return;

  log('\nüîß Configura√ß√µes atuais:', 'blue');
  log(`URL: ${envVars.NEXT_PUBLIC_SUPABASE_URL || 'N√£o configurada'}`, 'yellow');
  log(`Anon Key: ${envVars.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'Configurada' : 'N√£o configurada'}`, 'yellow');
  log(`Service Key: ${envVars.SUPABASE_SERVICE_ROLE_KEY ? 'Configurada' : 'N√£o configurada'}`, 'yellow');
  
  // Verificar se est√° usando fallback
  const isUsingFallback = envVars.NEXT_PUBLIC_SUPABASE_URL && 
    envVars.NEXT_PUBLIC_SUPABASE_URL.includes('lfxietcasaooenffdodr');
  
  if (isUsingFallback) {
    log('\n‚ö†Ô∏è  ATEN√á√ÉO: Usando configura√ß√£o de fallback (hardcoded)', 'yellow');
    log('   Isso pode causar problemas de sess√£o cruzada!', 'red');
  } else {
    log('\n‚úÖ Usando configura√ß√£o personalizada', 'green');
  }
}

// Fun√ß√£o principal
async function main() {
  log('üöÄ VERIFICADOR DO SUPABASE', 'bright');
  log('Verificando configura√ß√£o e sess√µes...', 'blue');
  
  try {
    // 1. Verificar configura√ß√£o
    const configOk = await verifySupabaseConfig();
    
    // 2. Verificar sess√µes
    const sessionsOk = await checkActiveSessions();
    
    // 3. Limpar sess√µes problem√°ticas
    const cleanupOk = await clearProblematicSessions();
    
    // 4. Gerar relat√≥rio
    generateConfigReport();
    
    // Resultado final
    log('\nüìä RESUMO DA VERIFICA√á√ÉO', 'cyan');
    log('='.repeat(50), 'cyan');
    
    if (configOk && sessionsOk && cleanupOk) {
      log('‚úÖ Todas as verifica√ß√µes passaram!', 'green');
      log('üéâ Supabase est√° configurado corretamente', 'green');
    } else {
      log('‚ùå Algumas verifica√ß√µes falharam', 'red');
      log('üîß Verifique os erros acima e corrija a configura√ß√£o', 'yellow');
    }
    
    log('\nüí° RECOMENDA√á√ïES:', 'blue');
    log('1. Use vari√°veis de ambiente pr√≥prias (n√£o fallback)', 'yellow');
    log('2. Verifique se n√£o h√° usu√°rios duplicados', 'yellow');
    log('3. Limpe o cache do navegador ap√≥s mudan√ßas', 'yellow');
    log('4. Teste o registro em modo inc√≥gnito', 'yellow');
    
  } catch (error) {
    log(`‚ùå Erro geral: ${error.message}`, 'red');
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  verifySupabaseConfig,
  checkActiveSessions,
  clearProblematicSessions,
  generateConfigReport
};
