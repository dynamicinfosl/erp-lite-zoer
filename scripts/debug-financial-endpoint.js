const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes hardcoded
const SUPABASE_URL = 'https://lfxietcasaooenffdodr.supabase.co';
const SUPABASE_SERVICE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxmeGlldGNhc2Fvb2VuZmZkb2RyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzAxNzc0MywiZXhwIjoyMDcyNTkzNzQzfQ.gspNzN0khb9f1CP3GsTR5ghflVb2uU5f5Yy4mxlum10';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function debugFinancialEndpoint() {
  try {
    console.log('üîç DEBUG DO ENDPOINT FINANCEIRO');
    console.log('================================\n');
    
    const targetTenantId = '529d7b8f-c673-4e62-9c9e-f63ecc647970';
    
    // 1. Verificar estrutura da tabela
    console.log('üìã VERIFICANDO ESTRUTURA DA TABELA');
    console.log('==================================');
    
    const { data: tableInfo, error: tableError } = await supabase
      .from('financial_transactions')
      .select('*')
      .limit(1);
    
    if (tableError) {
      console.log('‚ùå Erro ao acessar tabela:', tableError.message);
    } else {
      console.log('‚úÖ Tabela acess√≠vel');
      if (tableInfo && tableInfo.length > 0) {
        console.log('üìä Campos da tabela:', Object.keys(tableInfo[0]));
      }
    }
    
    // 2. Buscar transa√ß√µes com filtro de tenant
    console.log('\nüîç BUSCANDO TRANSA√á√ïES COM FILTRO DE TENANT');
    console.log('===========================================');
    
    const { data: tenantTransactions, error: tenantError } = await supabase
      .from('financial_transactions')
      .select('*')
      .eq('tenant_id', targetTenantId);
    
    if (tenantError) {
      console.log('‚ùå Erro ao buscar transa√ß√µes do tenant:', tenantError.message);
    } else {
      console.log(`‚úÖ Transa√ß√µes encontradas: ${tenantTransactions?.length || 0}`);
      tenantTransactions?.forEach((transaction, index) => {
        console.log(`  ${index + 1}. ${transaction.description} - R$ ${transaction.amount} (tenant: ${transaction.tenant_id})`);
      });
    }
    
    // 3. Buscar todas as transa√ß√µes para comparar
    console.log('\nüìä TODAS AS TRANSA√á√ïES NO BANCO');
    console.log('=================================');
    
    const { data: allTransactions, error: allError } = await supabase
      .from('financial_transactions')
      .select('id, description, amount, tenant_id')
      .order('id', { ascending: false })
      .limit(10);
    
    if (allError) {
      console.log('‚ùå Erro ao buscar todas as transa√ß√µes:', allError.message);
    } else {
      console.log(`üìä Total de transa√ß√µes: ${allTransactions?.length || 0}`);
      allTransactions?.forEach((transaction, index) => {
        console.log(`  ${index + 1}. ${transaction.description} - R$ ${transaction.amount} (tenant: ${transaction.tenant_id})`);
      });
    }
    
    // 4. Testar diferentes filtros
    console.log('\nüß™ TESTANDO DIFERENTES FILTROS');
    console.log('==============================');
    
    // Filtro por tenant_id exato
    const { data: exactFilter, error: exactError } = await supabase
      .from('financial_transactions')
      .select('id, description, amount, tenant_id')
      .eq('tenant_id', targetTenantId);
    
    console.log(`üîç Filtro exato (tenant_id = '${targetTenantId}'): ${exactFilter?.length || 0} resultados`);
    
    // Filtro por tenant_id diferente
    const { data: differentFilter, error: differentError } = await supabase
      .from('financial_transactions')
      .select('id, description, amount, tenant_id')
      .neq('tenant_id', targetTenantId);
    
    console.log(`üîç Filtro diferente (tenant_id != '${targetTenantId}'): ${differentFilter?.length || 0} resultados`);
    
    // 5. Verificar se h√° problema de tipo de dados
    console.log('\nüîç VERIFICANDO TIPOS DE DADOS');
    console.log('=============================');
    
    if (tenantTransactions && tenantTransactions.length > 0) {
      const firstTransaction = tenantTransactions[0];
      console.log('üìä Primeira transa√ß√£o encontrada:');
      console.log(`   ID: ${firstTransaction.id} (tipo: ${typeof firstTransaction.id})`);
      console.log(`   Tenant ID: ${firstTransaction.tenant_id} (tipo: ${typeof firstTransaction.tenant_id})`);
      console.log(`   Descri√ß√£o: ${firstTransaction.description}`);
      console.log(`   Valor: ${firstTransaction.amount}`);
    } else {
      console.log('‚ö†Ô∏è Nenhuma transa√ß√£o encontrada para o tenant');
    }
    
    // 6. Testar endpoint diretamente
    console.log('\nüåê TESTANDO ENDPOINT DIRETAMENTE');
    console.log('=================================');
    
    try {
      const response = await fetch(`http://localhost:3000/next_api/financial-transactions?tenant_id=${targetTenantId}`);
      console.log(`üì° Status da resposta: ${response.status}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`üìä Dados retornados: ${data?.data?.length || 0} transa√ß√µes`);
        console.log(`üìù Estrutura da resposta:`, {
          success: data?.success,
          dataLength: data?.data?.length,
          hasData: !!data?.data
        });
      } else {
        const errorText = await response.text();
        console.log(`‚ùå Erro na resposta: ${errorText}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro ao testar endpoint: ${error.message}`);
    }
    
    console.log('\nüéØ RESUMO DO DEBUG');
    console.log('==================');
    console.log(`‚úÖ Transa√ß√µes no banco para tenant: ${tenantTransactions?.length || 0}`);
    console.log(`üìä Total de transa√ß√µes no banco: ${allTransactions?.length || 0}`);
    console.log(`üîç Filtro exato funcionando: ${exactFilter?.length || 0} resultados`);
    
    if (tenantTransactions && tenantTransactions.length > 0) {
      console.log('\n‚úÖ DADOS ENCONTRADOS NO BANCO!');
      console.log('üí° O problema pode estar no endpoint ou na consulta');
    } else {
      console.log('\n‚ö†Ô∏è NENHUM DADO ENCONTRADO NO BANCO');
      console.log('üí° Verifique se as transa√ß√µes foram criadas corretamente');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  }
}

debugFinancialEndpoint().catch(console.error);
